/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// If the loader is already loaded, just stop.
if (!self.define) {
  const singleRequire = name => {
    // Something has changed in Rollup's AMD stuff. This fixes it:
    if (name !== 'require') {
      name = name + '.js';
    }

    return Promise.resolve()
      .then(() => {
        if (registry[name]) {
          return;
        }
        if ("document" in self) {
          return new Promise(resolve => {
            const script = document.createElement("script");
            script.src = name;
            // Ya never know
            script.defer = true;
            document.head.appendChild(script);
            script.onload = resolve;
          })
        } else {
          // HACK: As we're in a worker whose URL is blob://..., we need to give
          // an absolute URL to importScripts. This worker doesn't know the main
          // page's URL, so hard-coded URL here :(
          importScripts('https://proxx.app/' + name);
        }
      }).then(() => {
        if (!registry[name]) {
          throw new Error(`Module ${name} didnâ€™t register its module`);
        }
        return registry[name];
      });
  };

  const require = (names, resolve) => {
    Promise.all(names.map(singleRequire))
      .then(modules => modules.length === 1 ? modules[0] : modules)
      .then(result => resolve(result));
  };

  const registry = {
    require: Promise.resolve(require)
  };

  self.define = (moduleName, depsNames, factory) => {
    if (registry[moduleName]) {
      // Module is already loading or loaded.
      return;
    }
    registry[moduleName] = new Promise(resolve => {
      let exports = {};
      const module = {
        uri: location.origin + moduleName.slice(1)
      };
      Promise.all(
        depsNames.map(depName => {
          if (depName === "exports") {
            return exports;
          }
          if (depName === "module") {
            return module;
          }
          return singleRequire(depName);
        })
      ).then(deps => {
        factory(...deps);
        resolve(exports);
      });
    });
  };
}
